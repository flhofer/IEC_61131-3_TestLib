(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM Test_Server_Room
VAR CONSTANT
    NoOfTests : USINT := 2;
    NoOfInputs : USINT := 4;
    TestVars : ARRAY [1..NoOfTests,1..NoOfInputs] OF VarsTest_Server_Room := 
        
        (* Test case 1 *)
        ( testtime := 1000, Run := 0, Temp := 23.1, ALight := 0, AVoice := 0 ),
        ( testtime := 2000, Run := 1, Temp := 25.1, ALight := 1, AVoice := 1 ),
        ( testtime := 3000, Run := 0, Temp := 26.5, ALight := 0, AVoice := 0 ),
        ( testtime :=  0 ),
        
        (* Test case 2 *)
        ( testtime :=    0, Run := 1, ALight := 0, AVoice := 0 ),
        ( testtime := 1000, Run := 1, ALight := 1, AVoice := 0 ),
        ( testtime := 2000, Run := 1, ALight := 1, AVoice := 1 ),
        ( testtime := 3000, Run := 1, ALight := 0, AVoice := 0 );
END_VAR
VAR_OUTPUT
    Pass: BOOL;
END_VAR
VAR
    ptrVars : POINTER TO Vars_Test_Server_Room;
    Room : SERVER_ROOM;
    Array1 : ARRAY[0..8] OF REAL := tTupReal, 0, 22.1  , 1000, 23.1, 2000, 25.1, 3000, 22.0;
END_VAR
(* @END_DECLARATION := '0' *)
testInit('Test_Serve', NoOfTests);

CASE _tls_ OF
    sT_INIT:    (* State Init *)
                Room(Run := TRUE, Temp:= 20.1); (* start temp *) 
                testParam(pWTIME, 5000);
                ;
                IF _tlt_ = 1 THEN
                    testParam(pSTEPS, 3);
                ELSE
                    testParam(pSteps, 4);
                END_IF

    sT_RUN:    (* State Run *)
                ptrVars := ADR(TestVars[_tlt_,_tlp_]);
                Room(
                    Run := ptrVars^.Run,
                    Temp := SEL( _tlt_ <> 2, testGenArray(ADR(Array1),SIZEOF(Array1)),
                        ptrVars^.Temp)
                    );

                assertEquals  ( Value1 := Room.ALight,
                                Value2 := ptrVars^.ALight,
                                Mode := mVFY, Delay := ptrVars^.testTime);

                assertEquals  ( Value1 := Room.AVoice,
                                Value2 := ptrVars^.AVoice,
                                Mode := mBFRNG +  100, Delay := ptrVars^.testTime);

    sTC_PASS:    (* State Case Pass *)
                Pass := TRUE;
END_CASE
END_PROGRAM
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
TYPE Vars_Test_Server_Room :
STRUCT
    testtime : DWORD;
    (* Inputs *)
    Run : BOOL;
    Temp : REAL;
    (* Expected outputs *)
    ALight : BOOL;
    AVoice : BOOL;
END_STRUCT
END_TYPE

(* @END_DECLARATION := '0' *)
